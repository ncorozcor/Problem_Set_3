rm(list = ls())

# cargar librerias
require(pacman)
library(tidyverse)

p_load(tidyverse,
       rio,
       sf,
       rstudioapi,
       stargazer,
       glmnet,
       MLmetrics,
       caret)


# importar la base de datos
test_hogares <- readRDS("/Users/ncoro/Desktop/2023/BML/TALLER 3/test_hogares.rds")
ptrain_hogares <- readRDS("/Users/ncoro/Desktop/2023/BML/TALLER 3/ptrain_hogares.rds")

itrain_hogares <- readRDS("/Users/ncoro/Desktop/2023/BML/TALLER 3/itrain_hogares.rds")

##Clasificación

table(ptrain_hogares$pobre)

#Se observa que 33.024 pobres y 131.936 no pobres

library(stargazer)

ptrain_hogares<-ptrain_hogares %>% mutate(Pobre_dummy=factor(pobre,levels=c(1,0), labels=c("Si", "No")))
table(ptrain_hogares$Pobre_dummy)    

#Para calcular ROC Dividimos la base train de hogares para obtener tres bases: Una mini train, una mini test y la de evaluación

require(caret)
set.seed(10101)
Split_1 <- createDataPartition(ptrain_hogares$pobre, p = .7) [[1]]
length(Split_1)

### Mini train
mini_train <- ptrain_hogares[-Split_1,]
ptrain_hogares_mini<- ptrain_hogares[ Split_1,]
#Esta partición nos deja 49.488 observaciones

set.seed(10101)
### ROC
Split_2<- createDataPartition(ptrain_hogares$pobre, p = 1/3) [[1]]
Evaluation_H <- ptrain_hogares[ Split_2,] #Base evaluacion para ROC
#Esta partición nos deja 54.987 observaciones

### Minitest
Testing_H <- ptrain_hogares[-Split_2,] #Base mini test
#Esta partición nos deja 109.973 observaciones


#Proporción de la variable "Pobre" en la base de datos

#Para la base mini train
prop.table(table(ptrain_hogares_mini$Pobre_dummy)) 
#0.2006201 (SI) y 0.7993799 (NO)

#Para la base ROC
prop.table(table(Evaluation_H$Pobre_dummy))         
#0.2000655 (SI) y 0.7999345 (NO)

#Para la base mini test
prop.table(table(Testing_H$Pobre_dummy))         
#0.2002582 (SI) y 0.7997418 (NO)


#K-fold como método de control del modelo

Varios_parametros<-function(...)c(twoClassSummary(...), defaultSummary(...))

ctrl_def_modg <- trainControl(method = "cv",
                              number = 5,
                              summaryFunction = Varios_parametros,
                              classProbs = TRUE,
                              verbose=FALSE,
                              savePredictions = T)

### Análisis con el MD1 ###


##### Las variables que vamos a utilizar en el modelo son:

#Se realiza el modelo de clasificacón con la base de control 
#El modelo contiene las siguientes variables
#Número de personas por unidad de gasto (Npersug)
#Línea de pobreza (Lp)
#Tipo de vivienda (Tipo_vivienda)
#Dominio (Dominio)
#Número de cuartos (Num_cuartos)

#Revisamos y encontramos que dominio debe convertirse en factor#
ptrain_hogares_mini$Dominio <- factor(ptrain_hogares_mini$Dominio)
class(ptrain_hogares_mini$Dominio)

###LOGIT -----

set.seed(10101)
logit1 <- train(
  Pobre_dummy ~Npersug+Lp +factor(Tipo_vivienda)+ factor(Dominio)+Num_cuartos,
  data = ptrain_hogares_mini,
  method = "glm", #Para logit
  trControl = ctrl_def_modg,
  family = "binomial",
  preProcess = c("center", "scale"))

logit1


### LASSO -----
#Prueba tomando como métrica la Sensibilidad


#Lambdas para Lasso
lambdas <- 10^seq(-4, 0.01, length = 200)

set.seed(10101)
lasso_sens1 <- train(
  Pobre_dummy ~Npersug+Lp +factor(Tipo_vivienda)+ factor(Dominio)+Num_cuartos,
  data = ptrain_hogares_mini,
  method = "glmnet",
  trControl = ctrl_def_modg,
  family = "binomial",
  metric = "Sens",
  tuneGrid = expand.grid(alpha = 0,lambda=lambdas),
  preProcess = c("center", "scale"))

lasso_sens1
#lambda = 0.009435694

#Prueba tomando como métrica el ROC

set.seed(10101)
lasso_roc1 <- train(
  Pobre_dummy ~Npersug+Lp +factor(Tipo_vivienda)+ factor(Dominio)+Num_cuartos,
  data = ptrain_hogares_mini,
  method = "glmnet",
  trControl = ctrl_def_modg,
  family = "binomial",
  metric = "ROC",
  tuneGrid = expand.grid(alpha = 0,lambda=lambdas),
  preProcess = c("center", "scale"))

lasso_roc1    
#0.009883815

#Clasificación (Cut off)

Eval_Resultados <- data.frame(Pobre = Evaluation_H$Pobre_dummy)
Eval_Resultados$Roc <- predict(lasso_roc1,
                               newdata = Evaluation_H,
                               type = "prob")[,1]

library(pROC)
#ROC para la regresión
rf_ROC <- roc(Eval_Resultados$Pobre, Eval_Resultados$Roc, levels = rev(levels(Eval_Resultados$Pobre)))

rf_ROC
#Se obtiene resultado de area bajo la curva ROC de 0.7799, lo que permite interpretar que el modelo
presenta capacidad razonable entre clase. 


#Se calcula el Cut off
rf_Thresh <- coords(rf_ROC, x = "best", best.method = "closest.topleft")
rf_Thresh

##  threshold specificity sensitivity
##1 0.2007967   0.7004047   0.7082083

#Se evalúan los resultados
Eval_Resultados<-Eval_Resultados %>% mutate(hat_def_05=ifelse(Eval_Resultados$Roc>0.5,"Si","No"),
                                            hat_def_rf_Thresh=ifelse(Eval_Resultados$Roc>rf_Thresh$threshold,"Si","No"))

#Se realiza evaluación de los resultados del modelo de clasificación binaria utilizando el umbral de 0.5 (regla de Bayes) y el umbral obtenido de la curva ROC

#Cuando el threshold es igual a 0.5 (regla de Bayes)
with(Eval_Resultados,table(Pobre,hat_def_05))
#Cuando el threshold es obtenido del ROC
with(Eval_Resultados,table(Pobre,hat_def_rf_Thresh))



#Las tablas de contingencia muestran:
  Pobre    No    Si
  Si  3210  7791
  No 30808 13178

  ## Logit Lasso Up-sampling ##

set.seed(10101)
lasso_upsample1 <- upSample(x = ptrain_hogares_mini,
                            y = ptrain_hogares_mini$Pobre_dummy,
                            ## Mantener la variable de clasificación con el mismo nombre:
                            yname = "Pobre_dummy")

dim(lasso_upsample1)
table(lasso_upsample1$Pobre_dummy)

##obteniendo 
    #Si    No 
    #92306 92306 

set.seed(10101)
lasso_upsample1 <- train(
  Pobre_dummy ~Npersug+Lp +factor(Tipo_vivienda)+ factor(Dominio)+Num_cuartos,
  data = lasso_upsample1,
  method = "glmnet",
  trControl = ctrl_def_modg,
  family = "binomial",
  metric = "ROC",
  tuneGrid = expand.grid(alpha = 0,lambda=lambdas),
  preProcess = c("center", "scale")
)

lasso_upsample1
#0.01367666


#Logit Lasso Down-sampling#

set.seed(10101)
lasso_downsample1 <- downSample(x = ptrain_hogares_mini,
                                y = ptrain_hogares_mini$Pobre_dummy,
                                ## keep the class variable name the same:
                                yname = "Pobre_dummy")

table(lasso_downsample1$Pobre_dummy)

#Si    No 
#23166 23166 

set.seed(10101)
lasso_downsample1 <- train(
  Pobre_dummy ~Npersug+Lp +factor(Tipo_vivienda)+ factor(Dominio)+Num_cuartos,
  data = lasso_downsample1,
  method = "glmnet",
  trControl = ctrl_def_modg,
  family = "binomial",
  metric = "ROC",
  tuneGrid = expand.grid(alpha = 0,lambda=lambdas),
  preProcess = c("center", "scale")
)

lasso_downsample1
#0.01305657

#Elastic net#

set.seed(10101)

elasticnet1 <- train(
  Pobre_dummy ~Npersug+Lp +factor(Tipo_vivienda)+ factor(Dominio)+Num_cuartos,
  data = ptrain_hogares_mini,
  method = "glmnet",
  trControl = ctrl_def_modg,
  family = "binomial",
  metric = "ROC",
  preProcess = c("center", "scale")
)

elasticnet1
#lambda = 0.01921286

##Tablas de contingencia##

predictors<-c("Npersug","Lp","Tipo_vivienda", "Dominio","Num_cuartos") 

head(ptrain_hogares_mini[predictors])
testResults <- data.frame(Pobre = Testing_H$Pobre_dummy)

testResults$logit1<- predict(logit1,
                             newdata = Testing_H, 
                             type = "prob")[,1]
testResults$lasso_sens1<- predict(lasso_sens1,
                                  newdata = Testing_H,
                                  type = "prob")[,1]
testResults$lasso_roc1<- predict(lasso_roc1,
                                 newdata = Testing_H,
                                 type = "prob")[,1]
testResults$lasso_upsample1<- predict(lasso_upsample1,
                                      newdata = Testing_H,
                                      type = "prob")[,1]
testResults$lasso_downsample1<- predict(lasso_downsample1,
                                        newdata = Testing_H,
                                        type = "prob")[,1]
testResults$elasticnet1<- predict(elasticnet1,
                                  newdata = Testing_H,
                                  type = "prob")[,1]


testResults<-testResults %>%
  mutate(logit1=ifelse(logit1>0.5,"Si","No"),
         lasso_sens1=ifelse(lasso_sens1>0.5,"Si","No"),
         lasso_roc1=ifelse(lasso_roc1>0.5,"Si","No"),
         lasso_upsample1=ifelse(lasso_upsample1>0.5,"Si","No"),
         lasso_downsample1=ifelse(lasso_downsample1>0.5,"Si","No"),
         elasticnet1=ifelse(elasticnet1>0.5,"Si","No")
  )


#Tabla de contingencia para el modelo 1
with(testResults,table(Pobre,logit1))
with(testResults,table(Pobre,lasso_sens1))
with(testResults,table(Pobre,lasso_roc1))
with(testResults,table(Pobre,lasso_upsample1))
with(testResults,table(Pobre,lasso_downsample1))
with(testResults,table(Pobre,elasticnet1))


##Análisis con el Modelo 2##

##### Las variables que vamos a utilizar en el modelo son:

#Se realiza el modelo de clasificacón con la base de control 
#El modelo contiene las siguientes variables
#Número de personas por unidad de gasto (Npersug)
#Línea de pobreza (Lp)
#Tipo de vivienda (Tipo_vivienda)
#Dominio (Dominio)
#Máximo nivel de educación (max_educ_h)
#Número de habitaciones (P5010)
#Número de personas por cuarto (Num_personas_cuarto)



###LOGIT

set.seed(10101)
logit2 <- train(
  Pobre_dummy ~Npersug+Lp +factor(Tipo_vivienda)+ factor(Dominio)+
    max_educ_h+P5010+Num_personas_cuarto,
  data = ptrain_hogares_mini,
  method = "glm", #Para logit
  trControl = ctrl_def_modg,
  family = "binomial",
  preProcess = c("center", "scale"))

logit2
##ROC        Sens       Spec       Accuracy   Kappa    
##0.8006121  0.2708277  0.9626785  0.8238794  0.2983647

### LASSO
#Lambdas para Lasso
lambdas <- 10^seq(-4, 0.01, length = 200)

set.seed(10101)
lasso_sens2 <- train(
  Pobre_dummy ~Npersug+Lp +factor(Tipo_vivienda)+ factor(Dominio)+Num_cuartos+
    max_educ_h+P5010+Num_personas_cuarto,
  data = ptrain_hogares_mini,
  method = "glmnet",
  trControl = ctrl_def_modg,
  family = "binomial",
  metric = "Sens",
  tuneGrid = expand.grid(alpha = 0,lambda=lambdas),
  preProcess = c("center", "scale"))

lasso_sens2
#lambda = 0.0124646

### LASSO2
#Prueba tomando como métrica el ROC

set.seed(10101)
lasso_roc2 <- train(
  Pobre_dummy ~Npersug+Lp +factor(Tipo_vivienda)+ factor(Dominio)+
    max_educ_h+P5010+Num_personas_cuarto,
  data = ptrain_hogares_mini,
  method = "glmnet",
  trControl = ctrl_def_modg,
  family = "binomial",
  metric = "ROC",
  tuneGrid = expand.grid(alpha = 0,lambda=lambdas),
  preProcess = c("center", "scale"))

lasso_roc2    
#0.01189947

#Clasificación (Cut off)

Eval_Resultados <- data.frame(Pobre = Evaluation_H$Pobre_dummy)
Eval_Resultados$Roc <- predict(lasso_roc2,
                               newdata = Evaluation_H,
                               type = "prob")[,1]

library(pROC)
# ROC para la regresión
rf_ROC <- roc(Eval_Resultados$Pobre, Eval_Resultados$Roc, levels = rev(levels(Eval_Resultados$Pobre)))

rf_ROC
#el area bajo la curva ROC El 0.8009 sugiere que el modelo tiene una capacidad
#razonable para distinguir entre las dos clases.

#Se calcula el Cut off
rf_Thresh <- coords(rf_ROC, x = "best", best.method = "closest.topleft")
rf_Thresh

#threshold specificity sensitivity
# 0.1973855    0.722639   0.7325698


#Se evalúan los resultados
Eval_Resultados<-Eval_Resultados %>% mutate(hat_def_05=ifelse(Eval_Resultados$Roc>0.5,"Si","No"),
                                            hat_def_rf_Thresh=ifelse(Eval_Resultados$Roc>rf_Thresh$threshold,"Si","No"))

#Cuando el threshold es igual a 0.5 (regla de Bayes)
with(Eval_Resultados,table(Pobre,hat_def_05))
#Cuando el threshold es obtenido del ROC
with(Eval_Resultados,table(Pobre,hat_def_rf_Thresh))

#Las tablas de contingencia muestran:
#Pobre    No    Si
#Si  2942  8059
#No 31786 12200

#Logit Lasso Up-sampling##
set.seed(10101)
lasso_upsample2 <- upSample(x = ptrain_hogares_mini,
                            y = ptrain_hogares_mini$Pobre_dummy,
                            ## Mantener la variable de clasificación con el mismo nombre:
                            yname = "Pobre_dummy")

dim(lasso_upsample2)
table(lasso_upsample2$Pobre_dummy)

set.seed(10101)
lasso_upsample2 <- train(
  Pobre_dummy ~Npersug+Lp +factor(Tipo_vivienda)+ factor(Dominio)+
    max_educ_h+P5010+Num_personas_cuarto,
  data = lasso_upsample2,
  method = "glmnet",
  trControl = ctrl_def_modg,
  family = "binomial",
  metric = "ROC",
  tuneGrid = expand.grid(alpha = 0,lambda=lambdas),
  preProcess = c("center", "scale")
)

lasso_upsample2
#0.01571926


## Logit Lasso Down-sampling ##

set.seed(10101)
lasso_downsample2 <- downSample(x = ptrain_hogares_mini,
                                y = ptrain_hogares_mini$Pobre_dummy,
                                ## keep the class variable name the same:
                                yname = "Pobre_dummy")

table(lasso_downsample2$Pobre_dummy)

set.seed(10101)
lasso_downsample2 <- train(
  Pobre_dummy ~Npersug+Lp +factor(Tipo_vivienda)+ factor(Dominio)+
    max_educ_h+P5010+Num_personas_cuarto,
  data = lasso_downsample2,
  method = "glmnet",
  trControl = ctrl_def_modg,
  family = "binomial",
  metric = "ROC",
  tuneGrid = expand.grid(alpha = 0,lambda=lambdas),
  preProcess = c("center", "scale")
)

lasso_downsample2
#0.0164658

##Elastic net##

set.seed(10101)

elasticnet2 <- train(
  Pobre_dummy ~Npersug+Lp +factor(Tipo_vivienda)+ factor(Dominio)+
    max_educ_h+P5010+Num_personas_cuarto,
  data = ptrain_hogares_mini,
  method = "glmnet",
  trControl = ctrl_def_modg,
  family = "binomial",
  metric = "ROC",
  preProcess = c("center", "scale")
)

elasticnet2
#lambda = 0.002504042

##Tablas de contingencia##

predictors<-c("Npersug","Lp","Tipo_vivienda", "Dominio","Num_personas_cuarto") 

head(ptrain_hogares_mini[predictors])
testResults <- data.frame(Pobre = Testing_H$Pobre_dummy)

testResults$logit2<- predict(logit2,
                             newdata = Testing_H, 
                             type = "prob")[,1]
testResults$lasso_sens2<- predict(lasso_sens2,
                                  newdata = Testing_H,
                                  type = "prob")[,1]
testResults$lasso_roc2<- predict(lasso_roc2,
                                 newdata = Testing_H,
                                 type = "prob")[,1]
testResults$lasso_upsample2<- predict(lasso_upsample2,
                                      newdata = Testing_H,
                                      type = "prob")[,1]
testResults$lasso_downsample2<- predict(lasso_downsample2,
                                        newdata = Testing_H,
                                        type = "prob")[,1]
testResults$elasticnet2<- predict(elasticnet2,
                                  newdata = Testing_H,
                                  type = "prob")[,1]


testResults<-testResults %>%
  mutate(logit2=ifelse(logit2>0.5,"Si","No"),
         lasso_sens2=ifelse(lasso_sens2>0.5,"Si","No"),
         lasso_roc2=ifelse(lasso_roc2>0.5,"Si","No"),
         lasso_upsample2=ifelse(lasso_upsample2>0.5,"Si","No"),
         lasso_downsample2=ifelse(lasso_downsample2>0.5,"Si","No"),
         elasticnet2=ifelse(elasticnet2>0.5,"Si","No")
  )


#Tabla de contingencia para el modelo 2
with(testResults,table(Pobre,logit2))
with(testResults,table(Pobre,lasso_sens2))
with(testResults,table(Pobre,lasso_roc2))
with(testResults,table(Pobre,lasso_upsample2))
with(testResults,table(Pobre,lasso_downsample2))
with(testResults,table(Pobre,elasticnet2))


## Análisis con el Modelo 3 ## 


##### Las variables que vamos a utilizar en el modelo son:

#Se realiza el modelo de clasificacón con la base de control 
#El modelo contiene las siguientes variables
#Número de personas por unidad de gasto (Npersug)
#Línea de pobreza (Lp)
#Tipo de vivienda (Tipo_vivienda)
#Dominio (Dominio)
#En cuanto de los cuarto duermen las personas del hogar P5010
#Máximo nivel de educación (max_educ_h)
#Número de personas por cuarto (Num_personas_cuarto)

#Edad promedio: (edad_prom_h)
#Horas trabajadas: (horastrab_prom_h)


# LOGIT 

set.seed(10101)
logit3 <- train(
  Pobre_dummy ~Npersug+Lp +factor(Tipo_vivienda)+ factor(Dominio)+
    max_educ_h+P5010+Num_personas_cuarto+edad_prom_h+horastrab_prom_h,
  data = ptrain_hogares_mini,
  method = "glm", #Para logit
  trControl = ctrl_def_modg,
  family = "binomial",
  preProcess = c("center", "scale"))

logit3

## Predicción modelo Logit ####
y_hat_out_logit <- predict(logit3, newdata = test_hogares, type = "raw")
resultado_logit <- data.frame(id = test_hogares$id, pobre = y_hat_out_logit)

resultado_logit$pobre <- ifelse(resultado_logit$pobre == "No", 0, 1)
write.csv(resultado_logit, "/Users/ncoro/Desktop/2023/BML/TALLER 3/prediccion/predict_logit.csv", row.names = FALSE)


# LASSO ----
#Prueba tomando como métrica la Sensibilidad

#Lambdas para Lasso
lambdas <- 10^seq(-4, 0.01, length = 200)

set.seed(10101)
lasso_sens3 <- train(
  Pobre_dummy ~Npersug+Lp +factor(Tipo_vivienda)+ factor(Dominio)+
    max_educ_h+P5010+Num_personas_cuarto+
    edad_prom_h+horastrab_prom_h,
  data = ptrain_hogares_mini,
  method = "glmnet",
  trControl = ctrl_def_modg,
  family = "binomial",
  metric = "Sens",
  tuneGrid = expand.grid(alpha = 0,lambda=lambdas),
  preProcess = c("center", "scale"))

lasso_sens3
#lambda = 0.0124646

## Predicción modelo Lasso con sensibilidad ####
y_hat_out_lasso3 <- predict(lasso_sens3, newdata = test_hogares, type = "raw")
resultado_lasso3 <- data.frame(id = test_hogares$id, pobre = y_hat_out_lasso3)

resultado_lasso3$pobre <- ifelse(resultado_lasso3$pobre == "No", 0, 1)
write.csv(resultado_lasso3, "/Users/ncoro/Desktop/2023/BML/TALLER 3/prediccion/prediccion_lasso.csv", row.names = FALSE)

### LASSO
#Prueba tomando como métrica el ROC

set.seed(10101)
lasso_roc3 <- train(
  Pobre_dummy ~Npersug+Lp +factor(Tipo_vivienda)+ factor(Dominio)+
    max_educ_h+P5010+Num_personas_cuarto+
    edad_prom_h+horastrab_prom_h,
  data = ptrain_hogares_mini,
  method = "glmnet",
  trControl = ctrl_def_modg,
  family = "binomial",
  metric = "ROC",
  tuneGrid = expand.grid(alpha = 0,lambda=lambdas),
  preProcess = c("center", "scale"))

lasso_roc3    
#0.01982376

#Clasificación Cut off

Eval_Resultados <- data.frame(Pobre = Evaluation_H$Pobre_dummy)
Eval_Resultados$Roc <- predict(lasso_roc3,
                               newdata = Evaluation_H,
                               type = "prob")[,1]

library(pROC)
#ROC para la regresión
rf_ROC <- roc(Eval_Resultados$Pobre, Eval_Resultados$Roc, levels = rev(levels(Eval_Resultados$Pobre)))

rf_ROC
#Area bajo la curva ROC El 0.8619 sugiere que el modelo tiene una capacidad
#razonable para distinguir entre las dos clases.

#Se calcula el Cut off
rf_Thresh <- coords(rf_ROC, x = "best", best.method = "closest.topleft")
rf_Thresh
##threshold specificity sensitivity
#1 0.2049954   0.7853408   0.7792019

#Se evalúan los resultados
Eval_Resultados<-Eval_Resultados %>% mutate(hat_def_05=ifelse(Eval_Resultados$Roc>0.5,"Si","No"),
                                            hat_def_rf_Thresh=ifelse(Eval_Resultados$Roc>rf_Thresh$threshold,"Si","No"))

#Cuando el threshold es igual a 0.5 (regla de Bayes)
with(Eval_Resultados,table(Pobre,hat_def_05))
#Cuando el threshold es obtenido del ROC
with(Eval_Resultados,table(Pobre,hat_def_rf_Thresh))


#Las tablas de contingencia muestran:
#Pobre    No    Si
#Si  2429  8572
#No 34544  9442

## Lasso Up-sampling##

set.seed(10101)
lasso_upsample3 <- upSample(x = ptrain_hogares_mini,
                            y = ptrain_hogares_mini$Pobre_dummy,
                            ## Mantener la variable de clasificación con el mismo nombre:
                            yname = "Pobre_dummy")

dim(lasso_upsample3)
table(lasso_upsample3$Pobre_dummy)

set.seed(10101)
lasso_upsample3 <- train(
  Pobre_dummy ~Npersug+Lp +factor(Tipo_vivienda)+ factor(Dominio)+
    max_educ_h+P5010+Num_personas_cuarto+
    edad_prom_h+horastrab_prom_h,
  data = lasso_upsample3,
  method = "glmnet",
  trControl = ctrl_def_modg,
  family = "binomial",
  metric = "ROC",
  tuneGrid = expand.grid(alpha = 0,lambda=lambdas),
  preProcess = c("center", "scale")
)

lasso_upsample3
#0.01571926

### Predicciones modelo lasso down-sample ----
y_hat_out_lassoup <- predict(lasso_upsample3, newdata = test_hogares, type = "raw")
resultado_lassoup <- data.frame(id = test_hogares$id, pobre = y_hat_out_lassoup)

resultado_lassoup$pobre <- ifelse(resultado_lassoup$pobre == "No", 0, 1)
write.csv(resultado_lassoup, "/Users/ncoro/Desktop/2023/BML/TALLER 3/prediccion/prediccion_lassoup.csv", row.names = FALSE)


#Lasso Down-sampling#

set.seed(10101)
lasso_downsample3 <- downSample(x = ptrain_hogares_mini,
                                y = ptrain_hogares_mini$Pobre_dummy,
                                ## keep the class variable name the same:
                                yname = "Pobre_dummy")

table(lasso_downsample3$Pobre_dummy)

set.seed(10101)
lasso_downsample3 <- train(
  Pobre_dummy ~Npersug+Lp +factor(Tipo_vivienda)+ factor(Dominio)+
    max_educ_h+P5010+Num_personas_cuarto+
    edad_prom_h+horastrab_prom_h,
  data = lasso_downsample3,
  method = "glmnet",
  trControl = ctrl_def_modg,
  family = "binomial",
  metric = "ROC",
  tuneGrid = expand.grid(alpha = 0,lambda=lambdas),
  preProcess = c("center", "scale")
)

lasso_downsample3
#0.01571926

### Predicciones modelo lasso down-sample ----
y_hat_out_lassodown <- predict(lasso_downsample3, newdata = test_hogares, type = "raw")
resultado_lassodown <- data.frame(id = test_hogares$id, pobre = y_hat_out_lassodown)

resultado_lassodown$pobre <- ifelse(resultado_lassodown$pobre == "No", 0, 1)
write.csv(resultado_lassodown, "/Users/ncoro/Desktop/2023/BML/TALLER 3/prediccion/prediccion_lassodown.csv", row.names = FALSE)

##Elastic net       
set.seed(10101)

elasticnet3 <- train(
  Pobre_dummy ~ Npersug + Lp + factor(Tipo_vivienda) + factor(Dominio) +
    max_educ_h + P5010 + Num_personas_cuarto + edad_prom_h + horastrab_prom_h,
  data = ptrain_hogares_mini,
  method = "glmnet",
  trControl = ctrl_def_modg,
  family = "binomial",
  metric = "ROC",
  preProcess = c("center", "scale")
)


elasticnet3
#lambda = 0.002504042

### Predicciones modelo 3 EN ----
y_hat_out_EN3 <- predict(elasticnet3, newdata = test_hogares, type = "raw")
resultado_EN3 <- data.frame(id = test_hogares$id, pobre = y_hat_out_EN3)

resultado_EN3$pobre <- ifelse(resultado_EN3$pobre == "No", 0, 1)
write.csv(resultado_EN3, "/Users/ncoro/Desktop/2023/BML/TALLER 3/prediccion/prediccion_EN3.csv", row.names = FALSE)


#Modelo 4 EN#
set.seed(10101)

elasticnet4 <- train(
  Pobre_dummy ~ Npersug + Lp + Tipo_vivienda + factor(Dominio) + Num_cuartos +
    max_educ_h + P5010 + Num_personas_cuarto +
   edad_prom_h + horastrab_prom_h +
    Nper + Li,
  data = ptrain_hogares_mini,
  method = "glmnet",
  trControl = ctrl_def_modg,
  family = "binomial",
  metric = "ROC",
  preProcess = c("center", "scale")
)

elasticnet4
#lambda = 0.002504042

### Predicciones modelo 4 EN ----
y_hat_out_EN4 <- predict(elasticnet4, newdata = test_hogares, type = "raw")
resultado_EN4 <- data.frame(id = test_hogares$id, pobre = y_hat_out_EN4)

resultado_EN4$pobre <- ifelse(resultado_EN4$pobre == "No", 0, 1)
write.csv(resultado_EN4, "/Users/ncoro/Desktop/2023/BML/TALLER 3/prediccion/prediccion_EN4.csv", row.names = FALSE)


## Modelo 5 EN ####

## Estandarizar variable edad ####
mu <- mean(ptrain_hogares_mini$edad_prom_h)
sigma <- sd(ptrain_hogares_mini$edad_prom_h)
ptrain_hogares_mini$estedad_prom_h <- (ptrain_hogares_mini$edad_prom_h - mu)/sigma
test_hogares$estedad_prom_h <- (test_hogares$edad_prom_h - mu)/sigma

## Estandarizar variable horas_trabajadas ####
mu <- mean(ptrain_hogares_mini$horastrab_prom_h)
sigma <- sd(ptrain_hogares_mini$horastrab_prom_h)
ptrain_hogares_mini$esthorastrab_prom_h <- (ptrain_hogares_mini$horastrab_prom_h - mu)/sigma
test_hogares$esthorastrab_prom_h <- (test_hogares$horastrab_prom_h - mu)/sigma

## Crear log_income
ptrain_hogares_mini$t_INGH <- ifelse(ptrain_hogares_mini$t_INGH == 0, 0.1, ptrain_hogares_mini$t_INGH)
ptrain_hogares_mini$log_income <- log(ptrain_hogares_mini$t_INGH)

ien_test_hogares$t_INGH <- ifelse(ien_test_hogares$t_INGH == 0, 0.1, ien_test_hogares$t_INGH)
ien_test_hogares$log_income <- log(ien_test_hogares$t_INGH)

set.seed(10101)

elasticnet5 <- train(
  Pobre_dummy ~ factor(Dominio) + Num_cuartos + P5010 + Tipo_vivienda +
    Nper + Npersug + Li + Lp + Num_personas_cuarto + t_INGH +
    edad_prom_h + horastrab_prom_h + max_educ_h,
  data = ptrain_hogares_mini,
  method = "glmnet",
  trControl = ctrl_def_modg,
  family = "binomial",
  metric = "ROC",
  preProcess = c("center", "scale")
)

elasticnet5
#lambda = 0.0002504042

## Predicciones modelo 6 EN ----
y_hat_out_EN5 <- predict(elasticnet5, newdata = test_hogares, type = "raw")
resultado_EN5 <- data.frame(id = test_hogares$id, pobre = y_hat_out_EN5)

resultado_EN5$pobre <- ifelse(resultado_EN5$pobre == "No", 0, 1)
write.csv(resultado_EN5, ""/Users/ncoro/Desktop/2023/BML/TALLER 3/prediccion/prediccion_EN5.csv", row.names = FALSE)

##Tablas de contingencia##

predictors<-c("Npersug","Lp","Tipo_vivienda", "Dominio",
              "max_educ_h", "P5010", "Num_personas_cuarto",
              "edad_prom_h", "horastrab_prom_h") 

head(ptrain_hogares_mini[predictors])
testResults <- data.frame(Pobre = Testing_H$Pobre_dummy)

testResults$logit3<- predict(logit3,
                             newdata = Testing_H, 
                             type = "prob")[,1]
testResults$lasso_sens3<- predict(lasso_sens3,
                                  newdata = Testing_H,
                                  type = "prob")[,1]
testResults$lasso_roc3<- predict(lasso_roc3,
                                 newdata = Testing_H,
                                 type = "prob")[,1]
testResults$lasso_upsample3<- predict(lasso_upsample3,
                                      newdata = Testing_H,
                                      type = "prob")[,1]
testResults$lasso_downsample3<- predict(lasso_downsample3,
                                        newdata = Testing_H,
                                        type = "prob")[,1]
testResults$elasticnet3<- predict(elasticnet3,
                                  newdata = Testing_H,
                                  type = "prob")[,1]


testResults<-testResults %>%
  mutate(logit3=ifelse(logit3>0.5,"Si","No"),
         lasso_sens3=ifelse(lasso_sens3>0.5,"Si","No"),
         lasso_roc3=ifelse(lasso_roc3>0.5,"Si","No"),
         lasso_upsample3=ifelse(lasso_upsample3>0.5,"Si","No"),
         lasso_downsample3=ifelse(lasso_downsample3>0.5,"Si","No"),
         elasticnet3=ifelse(elasticnet3>0.5,"Si","No")
  )


#Tabla de contingencia para el modelo 3
with(testResults,table(Pobre,logit3))
with(testResults,table(Pobre,lasso_sens3))
with(testResults,table(Pobre,lasso_roc3))
with(testResults,table(Pobre,lasso_upsample3))
with(testResults,table(Pobre,lasso_downsample3))
with(testResults,table(Pobre,elasticnet3))
